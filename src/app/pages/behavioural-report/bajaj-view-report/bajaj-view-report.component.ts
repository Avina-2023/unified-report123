import { AfterViewInit, Component, OnDestroy, OnInit, TemplateRef } from '@angular/core';
import { SentDataToOtherComp } from 'src/app/services/sendDataToOtherComp.service';
import { AppConfigService } from 'src/app/utils/app-config.service';
import { ApiService } from 'src/app/services/api.service';
import { Subscription } from 'rxjs';
import { ActivatedRoute } from '@angular/router';
import * as moment from 'moment';
import { MatDialog } from '@angular/material/dialog';
import { LoadingService } from 'src/app/services/loading.service';
@Component({
  selector: 'app-bajaj-view-report',
  templateUrl: './bajaj-view-report.component.html',
  styleUrls: ['./bajaj-view-report.component.scss']
})
export class BajajViewReportComponent implements OnInit, AfterViewInit, OnDestroy {
  getAllBehaviourData: any;
  getAllBehaviourcompetencydata:any;
  getAllBehaviourscorecontentdata:any;
  getBajaBehaviourReportAPISubscription: Subscription;
  getAllBasicData: any;
  emailId: any;
  highestEducation: any;
  skillSelected=0;
  competencyvalue=true;
  continouslyValue = 2;
  continouslyValueTwo :boolean = false;
  continouslyValueThree :boolean = false;
  continouslyValueFive :boolean = false;
  continouslyValueSix :boolean = false;
  continouslyValueSeven :boolean = false;
  continouslyValueNine :boolean = false;
  benchMarkScore = [
    {score:"1-3",label:"LOW",color:"red",bias:"Strong Bias",biascore:"81-100%",biaslabel:"Strong",colorcode:"#DE001C"},
    {score:"4-7",label:"AVERAGE",color:"orange",bias:"Mild Bias",biascore:"71-80%",biaslabel:"Mild",colorcode:"#F7A500"},
    {score:"8-10",label:"HIGH",color:"green",bias:"Low Bias",biascore:"> 70%",biaslabel:"Low",colorcode:"#0DB200"},
  ];
  instructionDisclaimer = [
    {
      topic: "Instructions:",
      content: [
        "This report has been generated by the computer based on the candidateâ€™s response to the assessment.",
        "The information presented in this report should be verified through other means such as feedback from peers, self-analysis, expert opinion and so forth, before being used for making any decisions."
      ]
    }, {
      topic: "Disclaimers:",
      content: [
        "This is strictly confidential report of the respondent. Information contained in this report should be disclosed only on a need-to-know basis.",
        "We want to emphasize that the information in this report is intended to be helpful and informative. While we make every effort to ensure accuracy, L&T EduTech cannot be held liable for any consequences resulting from the misuse of this report."
      ]
    }
  ]
  bgColorInput:string = '#85BD44';
  doughnutValue:number = 4;
  tabIndex:number = 0;
  getAllBehaviourAPIDetails: any;
  apiSuccess = true;
  isaccess: any;
  isPdfdownable = false;
  year = new Date().getFullYear();
  constructor(
    private sendData: SentDataToOtherComp,
    private ApiService: ApiService,
    private appconfig: AppConfigService,
    private route: ActivatedRoute,
    private dialog: MatDialog,
    private _loading: LoadingService,
  ) { }

  ngOnInit(): void {
    this.getRoute();
    this.isaccess = this.appconfig.isComingFromMicroCert();
    // this.continously()
  }
  ngAfterViewInit() {
    // Hack: Scrolls to top of Page after page view initialized
    let top = document.getElementById('top');
    if (top !== null) {
      top.scrollIntoView();
      top = null;
    }
  }

  continously() {
    if (this.continouslyValue == 2) {
      this.continouslyValueTwo = !this.continouslyValueTwo;
      this.continouslyValueThree = !this.continouslyValueThree;
      this.continouslyValueFive = !this.continouslyValueFive;
      this.continouslyValueSix = !this.continouslyValueSix;
      this.continouslyValueSeven = !this.continouslyValueSeven;
      this.continouslyValueNine = !this.continouslyValueNine;
    }
  }

  getRoute() {
    this.route.paramMap.subscribe((param: any) => {

      if (param && param.params && param.params.id) {
        let email = param.params.id ? this.ApiService.decrypt(param.params.id) : param.params.id;
        this.getBehaviouralReportData(email);
      }
    });
  }
  skillChange(index){
    this.skillSelected=index;

  }

  tabChanged(event) {
    this.tabIndex = event.index;
    this.skillSelected= event.index;
    switch(this.tabIndex) {
      case 0:
        this.bgColorInput = '#85BD44';
        break;
      case 1:
        this.bgColorInput = '#547ABC';
        break;
      case 2:
        this.bgColorInput = '#FCBD33';
        break;
      case 3:
        this.bgColorInput = '#C45CDD';
        break;
      default:
        this.bgColorInput = '#C3C5CA';
        break;
    }

  }



  getBehaviouralReportData(data) {
    const apiData = {
      email: data,
      reportId: "R2"
    };
    this.emailId = data;
    this.getBajaBehaviourReportAPISubscription = this.ApiService.getBehaviourReport(apiData).subscribe((response: any) => {
      if (response && response.success && response.data) {
        this.apiSuccess = true;
        this.getAllBehaviourData = response.data.data ? response.data.data : null;
        this.getAllBehaviourcompetencydata = response.data.data.reportSnapShot ? response.data.data.reportSnapShot : null;
        this.getAllBehaviourAPIDetails = response.data ? response.data : null;
        this.getAllBasicData = response.data.basicDetails ? response.data.basicDetails : null;
        this.highestEducation = this.getAllBasicData && this.getAllBasicData.education ? this.getAllBasicData.education : [];
        if (this.highestEducation.length > 0) {
          let i = this.highestEducation.length - 1;
          this.highestEducation = this.highestEducation[i];
        }
      } else {
        this.apiSuccess = false;
        // this.toastr.error('No Reports Available');
        this.getAllBasicData = null;
        this.getAllBehaviourData = null;
        this.getAllBehaviourAPIDetails = null;
      }
    }, (err) => {
      this.apiSuccess = false;
      this.getAllBasicData = null;
      this.getAllBehaviourData = null;
      this.getAllBehaviourAPIDetails = null;
    });
  }

  momentForm(date) {
    if (date) {
      const split = moment(date).format('DD/MM/YYYY');
      return split;
    }
  }
  openBenchmarkInfo(templateRef: TemplateRef<any>){
    this.dialog.open(templateRef, {
      width: "450px",
      height: "80%",
      position: { right: "0px", bottom: "0px"},
      panelClass: "filterModalbox",
      closeOnNavigation: true,
      disableClose: true,
    });
  }
  ngOnDestroy() {
    this.getBajaBehaviourReportAPISubscription ? this.getBajaBehaviourReportAPISubscription.unsubscribe() : '';
  }


  downloadreport(val){
    // console.log(val,'val');

    if(val){
      this.isPdfdownable = val;
      this.sendData.sendMessage(true,'');
    }else{
      this.isPdfdownable = false;
      this.sendData.sendMessage(false,'');
    }


  }

  progressbarcircle() {

  }
}
